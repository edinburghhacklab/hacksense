#!/usr/bin/env python

import sys
sys.path.insert(0, "/srv/hacksense/lib")

import hacksense
import logging
import time
import serial
import threading
import Queue

#logging.basicConfig()
#logging.getLogger().setLevel(logging.INFO)
hacksense.setup_logging(redirect=True)

#dali_serial_device = '/dev/serial/by-id/usb-Arduino_LLC_Arduino_Leonardo-if00'
dali_serial_device = '/dev/serial/by-path/platform-bcm2708_usb-usb-0:1.3.1.3:1.0'
dali_serial_baud = 57600

serial_queue = Queue.Queue(maxsize=10)
serial_zeros = 1
serial_wait = 0

class SerialThread(threading.Thread):
    def run(self):
        while True:
            try:
                self.loop()
            except:
                pass
            time.sleep(1)
    def loop(self):
        ser = serial.Serial(dali_serial_device, baudrate=dali_serial_baud)
        while True:
            data = serial_queue.get()
            start = time.time()
            ser.write(data)
            ser.flush()
            line = ser.readline()
            logging.info("< %r" % (line))
            logging.info("serial write in %fs: %r" % (time.time()-start, data))
            serial_queue.task_done()
            #if serial_wait > 0:
            #    time.sleep(serial_wait)

presets = {
    'dim': {
        1: [0xFE]
        },
    'corners': {
        0: [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16],
        254: [0, 2, 15, 17]
        },
    'movie': {
        0: [3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
        1: [0, 1, 2, 5]
        },
    'comfort': {
        140: [3, 6, 7, 8, 9, 10, 11, 12, 13, 14],
        190: [0, 1, 2, 4, 5, 15, 16, 17]
        },
    'bright': {
        254: [0xFE]
        },
    'off': {
        0: [0xFE],
        }
}

def compile_preset(preset):
    if presets.has_key(preset):
        p = presets[preset]
    elif type(preset) is int:
        num = preset % len(presets)
        name = presets.keys()[num]
        p = presets[name]
    output = ""
    for level in p.keys():
        for unit in p[level]:
            if unit < 64:
                output += chr(unit<<1)
                output += chr(level)
            else:
                output += chr(unit)
                output += chr(level)
    return output

def split_command_list(s):
    if len(s) % 4 == 0:
        commands = []
        for i in range(0, len(s)/4):
            commands.append(s[i*4:i*4+4])
        return commands
    else:
        raise Exception("Command string must be a multiple of 4 characters")

def split_command(s):
    if len(s) == 4:
        address = s[0:2]
        data = s[2:4]
        return int(address, 16), int(data, 16)
    else:
        raise Exception("Command must be 4 characters long")

def check(address, data):
    if 0b10100000 <= address and address <= 0b11111101:
        raise Exception("Special commands blocked")
    if address & 0b00000001 == 0b00000001:
        if data == 0x20:
            raise Exception("Reset command blocked")
        elif data == 0x80:
            raise Exception("Store DTR as short address command blocked")

def callback(ch, method, properties, body):
    topic = method.routing_key
    timestamp = properties.timestamp
    headers = properties.headers

    now = time.time()
    logging.info("%d %d %d %s %r %r" % (now, timestamp, now-timestamp, topic, headers, body))

    if now-timestamp > 3:
        return

    if topic == "dali.set":
        address = headers["address"]
        if address >= 0 and address < 64:
            level = headers["level"]
            output = chr(2) + chr(address << 1) + chr(level) + chr(0)*serial_zeros
            logging.info("setting address %d to %d: %r" % (address, level, output))
            logging.info("> %r" % (output))
            try:
                serial_queue.put(output)
            except Queue.Full:
                logging.warning("discarding serial packet: %r" % (output))
            #ser.write(output)
            #ser.flush()
        else:
            logging.err("Invalid address %d" % (address))

    elif topic == "dali.command":
        buffer = ""
        try:
            for cmd in split_command_list(body):
                address, data = split_command(cmd)
                check(address, data)
                buffer += chr(address)
                buffer += chr(data)
        except Exception, e:
            logging.exception("Bad command string")
            return
        output = chr(len(buffer)) + buffer + chr(0)*serial_zeros
        logging.info("> %r" % (output))
        try:
            serial_queue.put(output)
        except Queue.Full:
            logging.warning("discarding serial packet: %r" % (output))
        #ser.write(chr(len(buffer)) + buffer + chr(0))
        #ser.flush()

    elif topic == "dali.preset":
        buf = compile_preset(headers["preset"])
        output = chr(len(buf)) + buf + chr(0)*serial_zeros
        logging.info("> %r" % (output))
        try:
            serial_queue.put(output)
        except Queue.Full:
            logging.warning("discarding serial packet: %r" % (output))
        #ser.write(chr(len(buf)) + buf + chr(0))
        #ser.flush()

    elif topic == "setting.g1.lights.preset":
        buf = compile_preset(body)
        output = chr(len(buf)) + buf + chr(0)*serial_zeros
        logging.info("> %r" % (output))
        try:
            serial_queue.put(output)
        except Queue.Full:
            logging.warning("discarding serial packet: %r" % (output))

serial_thread = SerialThread()
serial_thread.daemon = True
serial_thread.start()

conn = hacksense.AMQPTopic()
conn.subscribe_callback(["dali.#", "setting.g1.lights.preset"], callback)
