#!/usr/bin/env python

import sys
sys.path.insert(0, "/srv/hacksense/lib")

import hacksense
import json
import logging
import os
import time
import urllib
import urllib2
import ConfigParser

hacksense.setup_logging(redirect=True)

# after this amount of idle time, automatically set the status to closed
status_timeout = 3600
status_warning = status_timeout-300

# notify of a PIR event if the lab has been idle for this amount of time
activity_notify_period = 4500

# to which channel should we send our IRC messages
irc_channel = "*DEFAULT*"

# secrets for sending status to twitter (via http://edinhacklab.com/)
twitter_secrets_file = '/srv/hacksense/etc/twitter_secrets.conf'

# spaceapi output file
spaceapi_json_path = '/srv/hacksense/var/spaceapi.json'

last_activity = time.time()
last_lcd = time.time()
last_ircstatus = 0
in_idle_state = False

def push_status_to_server(status):
    conf = ConfigParser.ConfigParser()
    conf.read(twitter_secrets_file)
    if status == 'open':
        values = {'k': conf.get('secrets', 'open')}
        data = urllib.urlencode(values)
        req = urllib2.Request('http://www.edinburghhacklab.com/internal/occupancy.php', data)
        if urllib2.urlopen(req).read() == 'DONE':
            return True
        else:
            return False
    elif status == 'closed':
        values = {'k': conf.get('secrets', 'closed')}
        data = urllib.urlencode(values)
        req = urllib2.Request('http://www.edinburghhacklab.com/internal/occupancy.php', data)
        if urllib2.urlopen(req).read() == 'DONE':
            return True
        else:
            return False

def write_spaceapi_json(status):
    spaceapi = {
        "api": "0.13",
        "space": "Edinburgh Hacklab",
        "logo": "http://edinburghhacklab.com/spaceapi/logo.png",
        "url": "http://edinburghhacklab.com/",
        "location": {"address": "1 Summerhall, Edinburgh, EH9 1PL, United Kingdom",
                     "lat": 55.939797,
                     "lon": -3.18162},
        "state": {"open": False,
                  "lastchange": int(time.time()),
                  "icon": {"open": "http://edinburghhacklab.com/spaceapi/open.png",
                           "closed": "http://edinburghhacklab.com/spaceapi/closed.png"}},
        "contact": {
            "phone": "+44 131 516 6856",
            "irc": "irc://irc.freenode.net/#edinhacklab",
            "twitter": "@edinhacklab",
            "email": "info@edinburghhacklab.com",
            "issue_mail": "servers@edinburghhacklab.com",
            "facebook": "https://www.facebook.com/edinburghhacklab"},
        "issue_report_channels": ["issue_mail"],
        "projects": ["http://wiki.edinburghhacklab.com/", "https://github.com/edinburghhacklab"],
        "feeds": {"blog": {"type": "rss", "url": "http://edinburghhacklab.com/feed/"},
                  "calendar": {"type": "ical", "url": "https://www.google.com/calendar/ical/vo52ojfgltbpbkh8fk52vbhb90%40group.calendar.google.com/public/basic.ics"}}
        }
    if status == 'open':
        spaceapi['state']['open'] = True
    else:
        spaceapi['state']['open'] = False
    spaceapi['open'] = spaceapi['state']['open'] # for compatibility with older API
    spaceapi['icon'] = spaceapi['state']['icon'] # for compatibility with older API
    f = open(spaceapi_json_path + '.tmp', 'w')
    json.dump(spaceapi, f, indent=2)
    f.close()
    os.rename(spaceapi_json_path + '.tmp', spaceapi_json_path)

def lcd(line1, line2=""):
    global last_lcd
    last_lcd = max(last_lcd, time.time())
    conn.publish("doorbot.lcd.display", {"line1": line1, "line2": line2})

def lcd_status():
    current_status = rconn.get('hacksense:labstatus:status')
    if current_status == "open":
        lcd("Status: Open")
    elif current_status == "closed":
        lcd("Status: Closed")
    else:
        lcd("Status: Unknown")
    
def say(text):
    conn.publish("actions.speak", {"data": text})

def irc(text):
    conn.publish("irc.send", {"channel": irc_channel, "data": text})

def publish(topic, headers={}, body=""):
    conn.publish(topic, headers, body)

def set_status(new_status):
    global rconn
    
    if new_status == "open":
        rconn.set('hacksense:labstatus:timestamp', time.time())
        rconn.set('hacksense:labstatus:status', 'open')
        logging.info("opening...")
        lcd("Opening...")
        irc("The lab is open!")
        if push_status_to_server('open'):
            logging.info("set to open")
            lcd("Status: Open")
            say("Status set to open")
        else:
            logging.info("set to open, tweet failed")
            lcd("Status: Open", "Tweet failed")
            say("Sorry, I couldn't reach twitter")
        write_spaceapi_json(new_status)

    elif new_status == "closed":
        rconn.set('hacksense:labstatus:timestamp', time.time())
        rconn.set('hacksense:labstatus:status', 'closed')
        logging.info("closing...")
        lcd("Closing...")
        irc("The lab is closed.")
        if push_status_to_server('closed'):
            logging.info("set to closed")
            lcd("Status: Closed")
            say("Status set to closed")
        else:
            logging.info("set to closed, tweet failed")
            lcd("Status: Closed", "Tweet failed")
            say("Sorry, I couldn't reach twitter")
        write_spaceapi_json(new_status)

def ircstatus_callback(timestamp, topic, headers, body):
    global last_ircstatus

    if time.time()-last_ircstatus < 60:
        # only respond a maximum of once per minute
        return

    current_status = rconn.get('hacksense:labstatus:status')
    current_status_t = float(rconn.get('hacksense:labstatus:timestamp') or 0)
    t = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(current_status_t))
    if current_status == "open":
        irc("The lab is open (since %s)" % (t))
    elif current_status == "closed":
        irc("The lab is closed (since %s)." % (t))
    else:
        irc("I don't know.")
    irc("Last activity at %s" % (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(last_activity))))

    last_ircstatus = time.time()

def status_callback(timestamp, topic, headers, body):
    global rconn

    current_status_timestamp = float(rconn.get('hacksense:labstatus:timestamp') or 0)
    current_status = rconn.get('hacksense:labstatus:status')
    current_status_age = time.time()-current_status_timestamp

    logging.info("Current status: %s %s" % (current_status_timestamp, current_status))
    logging.info("Current status age: %s" % (current_status_age))

    if topic == "doorbot.lcd.start":
        # lcd has started, send the current status
        time.sleep(1)
        lcd_status()
        return

    if time.time()-timestamp > 10:
        logging.warning("Ignoring delayed button message")
        return

    if topic in ['doorbot.buttons.green.longpress']:
        new_status = 'open'
        press = 'long'
    elif topic in ['doorbot.buttons.red.longpress']:
        new_status = 'closed'
        press = 'long'
    else:
        return

    set_status(new_status)

def timer_callback(timestamp, topic, headers, body):
    global in_idle_state

    publish("test.message", {}, "last_activity=%s" % (last_activity))

    # warn when open-status is about to time out
    current_status = rconn.get('hacksense:labstatus:status')
    if current_status == "open":
        activity_age = time.time()-last_activity
        publish("test.message", {}, "activity_age=%s" % (activity_age))
        if activity_age > status_timeout:
            set_status("closed")
            in_idle_state = False
        elif activity_age > status_warning:
            lcd("Status: Idle")
            say("Is anybody there? I will set the status to closed shortly.")
            in_idle_state = True
        
    if time.time()-last_lcd > 60:
        lcd_status()

def activity_callback(timestamp, topic, headers, body):
    global last_activity
    global in_idle_state

    if in_idle_state:
        lcd_status()
        say("Ok, leaving status open for now.")
        in_idle_state = False
    
    interval = time.time()-last_activity
    if interval > activity_notify_period:
        irc("Someone is in the lab.")
        publish("test.message", {}, "Signs of life in the lab (%s)" % (topic))

    last_activity = max(last_activity, timestamp)

def callback(ch, method, properties, body):
    global last_activity
    global last_lcd
    global rconn

    topic = method.routing_key
    timestamp = properties.timestamp
    headers = properties.headers

    logging.info("%s %s %r" % (timestamp, topic, headers))

    if topic == "update-spaceapi.open":
        write_spaceapi_json("open")
    if topic == "update-spaceapi.closed":
        write_spaceapi_json("closed")

    if topic.startswith("doorbot.buttons.") or topic in ["doorbot.card.swipe", "doorbot.pir"]:
        activity_callback(timestamp, topic, headers, body)

    if topic == "doorbot.lcd.display":
        last_lcd = max(last_lcd, timestamp)

    if topic == "timer.60":
        timer_callback(timestamp, topic, headers, body)

    if topic in ["doorbot.buttons.red.longpress",
                 "doorbot.buttons.green.longpress",
                 "doorbot.lcd.start"]:
        status_callback(timestamp, topic, headers, body)

    if topic == "irc.message" and headers.get("data", "") == ".labstatus":
        ircstatus_callback(timestamp, topic, headers, body)

rconn = hacksense.RedisConnection().redis
conn = hacksense.AMQPTopic()
conn.subscribe_callback(["timer.60", "doorbot.#", "irc.message", "update-spaceapi.#"], callback)
